#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_INPUT_SIZE 256
#define MAX_STACK_SIZE 10
#define MAX_QUEUE_SIZE 10

// Stack for undo functionality
typedef struct {
    int choices[MAX_STACK_SIZE];
    int top;
} Stack;

// Queue for user feedback (not fully utilized here, but included)
typedef struct {
    char feedback[MAX_QUEUE_SIZE][MAX_INPUT_SIZE];
    int front, rear, size;
} Queue;

// Node for linked list to store feelings
typedef struct Node {
    char feeling[MAX_INPUT_SIZE];
    struct Node *next;
} Node;

// Function prototypes
void shareFeelings(Node **head);
void breathingExercise();
void listenToMusic();
void talkToSomeone();
void selfHelpSuggestions();
void findNearbyLocations();
void push(Stack *stack, int choice);
int pop(Stack *stack);
void append(Node **head, const char *feeling);

int main() {
    int choice;
    Stack actionStack = { .top = -1 };
    Node *feelingsList = NULL;

    printf("Welcome! Let's start by having you share your feelings.\n");

    // User shares their feelings
    shareFeelings(&feelingsList);

    while (1) {
        printf("\nChoose an option:\n");
        printf("1. Try a breathing exercise\n");
        printf("2. Listen to some soothing music\n");
        printf("3. Talk to someone near you\n");
        printf("4. Get some self-help suggestions\n");
        printf("5. Find a nearby temple or garden\n");
        printf("6. Undo last action\n");
        printf("7. Exit\n");
        printf("Enter your choice (1-7): ");

        scanf("%d", &choice);
        getchar(); // Clear the newline character

        // Push the current choice onto the stack
        push(&actionStack, choice);

        switch (choice) {
            case 1:
                breathingExercise();
                break;
            case 2:
                listenToMusic();
                break;
            case 3:
                talkToSomeone();
                break;
            case 4:
                selfHelpSuggestions();
                break;
            case 5:
                findNearbyLocations();
                break;
            case 6:
                if (actionStack.top >= 0) {
                    printf("Undoing last action: %d\n", pop(&actionStack));
                } else {
                    printf("No actions to undo.\n");
                }
                break;
            case 7:
                printf("Thank you for chatting! Take care of yourself.\n");
                // Free the linked list
                while (feelingsList) {
                    Node *temp = feelingsList;
                    feelingsList = feelingsList->next;
                    free(temp);
                }
                return 0; // Exit the program
            default:
                printf("Invalid choice. Please try again.\n");
                break;
        }
    }

    return 0; // Indicate successful completion of the program
}

// Function implementations
void shareFeelings(Node **head) {
    printf("Please describe how you're feeling:\n");
    char feelingDescription[MAX_INPUT_SIZE];
    fgets(feelingDescription, MAX_INPUT_SIZE, stdin);
    feelingDescription[strcspn(feelingDescription, "\n")] = 0; // Remove newline
    append(head, feelingDescription);
    printf("Thank you for sharing. It's important to express your feelings.\n");
}

void append(Node **head, const char *feeling) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    strcpy(newNode->feeling, feeling);
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        Node *temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void breathingExercise() {
    printf("Breathing Exercise:\n");
    printf("1. Inhale deeply for 4 counts.\n");
    printf("2. Hold your breath for 4 counts.\n");
    printf("3. Exhale slowly for 4 counts.\n");
    printf("4. Repeat this for 5 minutes.\n");
}

void listenToMusic() {
    printf("Here are some soothing music suggestions:\n");
    printf("1. Relaxing Music 1: https://www.youtube.com/watch?v=lFcSrYw-ARY\n");
    printf("2. Nature Sounds: https://www.youtube.com/watch?v=1ZYbU82GVz4\n");
    printf("3. Meditation Music: https://www.youtube.com/watch?v=1zBNJ-hNdXo\n");
    printf("4. Calm Piano Music: https://www.youtube.com/watch?v=yJg-Y5byMMw\n");
    printf("5. Ocean Waves: https://www.youtube.com/watch?v=AS5DOmZ33Mo\n");
}

void talkToSomeone() {
    printf("It's good to talk to someone. Consider reaching out to a friend or family member.\n");
    printf("You can also talk to a mental health professional if you feel comfortable.\n");
}

void selfHelpSuggestions() {
    printf("Here are some self-help suggestions:\n");
    printf("- Journaling your thoughts.\n");
    printf("- Practicing mindfulness meditation.\n");
    printf("- Engaging in physical activity.\n");
    printf("- Reading a book that inspires you.\n");
}

void findNearbyLocations() {
    printf("You can visit:\n");
    printf("- Local Temple: https://www.google.com/search?q=temples+near+me&rlz=1C1CHBD_enIN1074IN1074&oq=temples+near+&gs_lcrp=EgZjaHJvbWUqBwgBEAAYjwIyBggAEEUYOTIHCAEQABiPAtIBCTc5MTBqMGoxNagCCLACAQ&sourceid=chrome&ie=UTF-8/\n");
    printf("- Local Garden: https://www.google.com/search?q=garden+near+me&rlz=1C1CHBD_enIN1074IN1074&oq=garden+near+me&gs_lcrp=EgZjaHJvbWUyDwgAEEUYORixAxjJAxiABDINCAEQABiSAxiABBiKBTINCAIQABiSAxiABBiKBTIHCAMQABiABDIHCAQQABiABDIHCAUQABiABDIHCAYQABiABDIHCAcQABiABDIHCAgQABiABDIHCAkQABiABNIBCTY2MDlqMGoxNagCCLACAQ&sourceid=chrome&ie=UTF-8/\n");
}

void push(Stack *stack, int choice) {
    if (stack->top < MAX_STACK_SIZE - 1) {
        stack->choices[++stack->top] = choice;
    }
}

int pop(Stack *stack) {
    if (stack->top >= 0) {
        return stack->choices[stack->top--];
    }
    return -1; // Indicate stack is empty
}




